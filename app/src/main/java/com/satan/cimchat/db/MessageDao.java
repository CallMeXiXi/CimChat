package com.satan.cimchat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.satan.cimchat.model.Message;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MESSAGE.
 */
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Sender = new Property(4, String.class, "sender", false, "SENDER");
        public final static Property Receiver = new Property(5, String.class, "receiver", false, "RECEIVER");
        public final static Property Time = new Property(6, Long.class, "time", false, "TIME");
        public final static Property File = new Property(7, String.class, "file", false, "FILE");
        public final static Property FileType = new Property(8, String.class, "fileType", false, "FILE_TYPE");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
    }

    ;


    public MessageDao(DaoConfig config) {
        super(config);
    }

    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'CONTENT' TEXT," + // 2: content
                "'TYPE' TEXT," + // 3: type
                "'SENDER' TEXT," + // 4: sender
                "'RECEIVER' TEXT," + // 5: receiver
                "'TIME' INTEGER," + // 6: time
                "'FILE' TEXT," + // 7: file
                "'FILE_TYPE' TEXT," + // 8: fileType
                "'STATUS' INTEGER);"); // 9: status
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }

        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(5, sender);
        }

        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(6, receiver);
        }

        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }

        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(8, file);
        }

        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(9, fileType);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sender
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiver
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // time
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // file
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileType
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // status
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceiver(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setFile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Message entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
